name: Deploy Celery on Windows

on:
  push:
    branches:
      - main

env:
  CELERY_DIR: C:\celery
  VENV_DIR: C:\celery\venv
  LOG_DIR: C:\celery\logs
  PYTHON_EXE: C:\celery\venv\Scripts\python.exe

jobs:
  deploy:
    runs-on: self-hosted
    name: Deploy Celery on Windows using NSSM

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy code to target directory
        shell: pwsh
        run: |
          if (!(Test-Path "${{ env.CELERY_DIR }}")) {
            New-Item -ItemType Directory -Path "${{ env.CELERY_DIR }}" | Out-Null
          }
          robocopy $PWD "${{ env.CELERY_DIR }}" /MIR
          $exitCode = $LASTEXITCODE
          if ($exitCode -gt 7) {
            Write-Error "Robocopy failed with exit code $exitCode"
            exit $exitCode
          } else {
            Write-Output "Robocopy completed successfully with exit code $exitCode"
            exit 0
          }

      - name: Recreate .env file
        shell: pwsh
        run: |
          $decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("${{ secrets.ENV_BASE_64 }}"))
          Set-Content -Path "${{ env.CELERY_DIR }}\.env" -Value $decoded

      - name: Stop existing Celery services
        shell: cmd
        continue-on-error: true
        run: |
          nssm stop CeleryWorker
          nssm stop CeleryFlower
          timeout 5
          nssm remove CeleryWorker confirm
          nssm remove CeleryFlower confirm

      - name: Set up Python virtual environment
        shell: pwsh
        run: |
          python -m venv "${{ env.VENV_DIR }}"
          & "${{ env.PYTHON_EXE }}" -m pip install --upgrade pip
          & "${{ env.PYTHON_EXE }}" -m pip install -r "${{ env.CELERY_DIR }}\requirements.txt"

      - name: Create log directory
        shell: pwsh
        run: |
          if (!(Test-Path "${{ env.LOG_DIR }}")) {
            New-Item -ItemType Directory -Path "${{ env.LOG_DIR }}" | Out-Null
          }

      - name: Install Celery Worker as NSSM service
        shell: cmd
        run: |
          nssm install CeleryWorker "${{ env.PYTHON_EXE }}" -m celery -A celery_app worker --concurrency=1 --loglevel=info
          nssm set CeleryWorker AppDirectory "${{ env.CELERY_DIR }}"
          nssm set CeleryWorker Start SERVICE_AUTO_START
          nssm set CeleryWorker AppStdout "${{ env.LOG_DIR }}\celery_stdout.log"
          nssm set CeleryWorker AppStderr "${{ env.LOG_DIR }}\celery_stderr.log"
          nssm start CeleryWorker

      - name: Install Flower as NSSM service
        shell: cmd
        run: |
          nssm install CeleryFlower "${{ env.PYTHON_EXE }}" -m celery -A celery_app flower
          nssm set CeleryFlower AppDirectory "${{ env.CELERY_DIR }}"
          nssm set CeleryFlower Start SERVICE_AUTO_START
          nssm set CeleryFlower AppStdout "${{ env.LOG_DIR }}\celery_flower_stdout.log"
          nssm set CeleryFlower AppStderr "${{ env.LOG_DIR }}\celery_flower_stderr.log"
          nssm start CeleryFlower
